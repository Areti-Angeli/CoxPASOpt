# -*- coding: utf-8 -*-
"""optuna_search.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AXfqCHNpRf1_60_AGT3ah1g5Fadu-rmf
"""

# Define the Optuna objective function

def objective(trial):
    # Hyperparameter search spaces
    Learning_Rate = trial.suggest_loguniform('Learning_Rate',0.001, 0.1)
    L2 = trial.suggest_loguniform('L2', 0.001, 0.01)
    Num_Epochs = trial.suggest_int('Num_Epochs', 10, 300)
    Dropout_Rate = [trial.suggest_uniform('dropout_rate_1', 0.0, 0.7), trial.suggest_uniform('dropout_rate_2', 0.0, 0.5)]
    Hidden_Nodes = 300
    Pathway_Nodes = 300
    Out_Nodes = 2

    train_x, train_ytime, train_yevent, train_age, _, _ = load_data("/content/drive/MyDrive/jan_files/TRAINING.xlsx", dtype)
    eval_x, eval_ytime, eval_yevent, eval_age, _, _ = load_data("/content/drive/MyDrive/jan_files/VALIDATION.xlsx", dtype)
    pathway_mask = load_pathway("/content/drive/MyDrive/jan_files/pt_fixed.xlsx", dtype)

    In_Nodes = train_x.shape[1]  # Number of input nodes

# Train the model
    _, _, _, eval_cindex = trainCoxPASNet(train_x, train_age, train_ytime, train_yevent, \
        eval_x, eval_age, eval_ytime, eval_yevent, pathway_mask, \
        In_Nodes, Pathway_Nodes, Hidden_Nodes, Out_Nodes, Learning_Rate, L2, Num_Epochs, Dropout_Rate)

    # Convert eval_cindex to a Python scalar if it's not already
    eval_cindex = eval_cindex.item() if isinstance(eval_cindex, torch.Tensor) else eval_cindex

    return eval_cindex

# Main execution block
if __name__ == "__main__":
    study = optuna.create_study(direction="maximize")  # Create a study to maximize C-index
    study.optimize(objective, n_trials=100)  # Optimize for 100 trials

    # Output best results
    print("Best hyperparameters: ", study.best_params)  # Print the best hyperparameters
    print("Best C-index: ", study.best_value)  # Print the best C-index value