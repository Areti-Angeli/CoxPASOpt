# -*- coding: utf-8 -*-
"""empirical_condition+survstatus_coxpasnet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k21RphOQTWr5J5JPRNVM9VTpRom3EL2k
"""

import os

!pwd

import os
import pandas as pd
import pickle

df = pd.read_excel("../data/data_inputs/pt.xlsx")

df['target_label'] = df['target_label'].str.split(';')

df_n = df.explode("target_label").pivot_table(index="source_label", columns="target_label", aggfunc="size", fill_value=0).reset_index()
df_n = df_n.set_index('source_label')

df_n.to_excel("../data/data_outputs/pt_fixed.xlsx")


import shap
import numpy as np
import pandas as pd
import math
import copy
from scipy.interpolate import interp1d
import matplotlib.pyplot as plt

import torch
import torch.nn.functional as F
import torch.nn as nn
import torch.optim as optim
import matplotlib.pyplot as plt

from sklearn.metrics import roc_auc_score, f1_score

torch.manual_seed(0)


"""### Run for interpret = Actual Run"""

dtype = torch.FloatTensor

''' Net Settings'''
In_Nodes = 2722 ###number of genes
Pathway_Nodes = 300 ###number of pathways
Hidden_Nodes = 300 ###number of hidden nodes
Out_Nodes = 1 ###number of hidden nodes in the last hidden layer

''' Initialize with updated hyperparameters from empirical search '''
Initial_Learning_Rate = 0.01
L2_Lambda =  0.005
Num_EPOCHS = 1166
Dropout_Rate = [0.7, 0.5]

''' load data and pathway '''
pathway_mask = load_pathway("/../data/data_outputs/pt_fixed.xlsx", dtype)
x, ytime, yevent, age, condition, feature_names = load_data("/../data/data_inputs/entire_data_condition.xlsx", dtype)

outpath = "/../data/data_outputs/empirical_InterpretCoxPASNet.pt"

'''train Cox-PASNet for model interpretation'''
InterpretCoxPASNet(x, age, ytime, yevent, pathway_mask, \
					In_Nodes, Pathway_Nodes, Hidden_Nodes, Out_Nodes, \
					Initial_Learning_Rate, L2_Lambda, Num_EPOCHS, Dropout_Rate, outpath)

'''load trained Cox-PASNet'''
net = Cox_PASNet(In_Nodes, Pathway_Nodes, Hidden_Nodes, Out_Nodes, pathway_mask)
net.load_state_dict(torch.load(outpath))
###if gpu is being used
if torch.cuda.is_available():
	net.cuda()
###

'''save weights and node values into files individually'''
w_sc1 = net.sc1.weight.data.cpu().detach().numpy()
w_sc2 = net.sc2.weight.data.cpu().detach().numpy()
w_sc3 = net.sc3.weight.data.cpu().detach().numpy()
w_sc4 = net.sc4.weight.data.cpu().detach().numpy()
np.savetxt("/../data/data_outputs/empirical_dual_cov_w_sc1.csv", w_sc1, delimiter = ",")
np.savetxt("/../data/data_outputs/empirical_dual_cov_w_sc2.csv", w_sc2, delimiter = ",")
np.savetxt("/../data/data_outputs/empirical_dual_cov_w_sc3.csv", w_sc3, delimiter = ",")
np.savetxt("/../data/data_outputs/empirical_dual_cov_w_sc4.csv", w_sc4, delimiter = ",")
# Forward pass for intermediate nodes
pathway_node = net.tanh(net.sc1(x))
hidden_node = net.tanh(net.sc2(pathway_node))
hidden_2_node = net.tanh(net.sc3(hidden_node))
x_cat = torch.cat((hidden_2_node, age), 1)
lin_pred = net.sc4(x_cat)

np.savetxt("/../data/data_outputs/empirical_dual_cov_pathway_node.csv", pathway_node.cpu().detach().numpy(), delimiter = ",")
np.savetxt("/../data/data_outputs/empirical_dual_cov_hidden_node.csv", hidden_node.cpu().detach().numpy(), delimiter = ",")
np.savetxt("/../data/data_outputs/empirical_dual_cov_hidden_2_node.csv", x_cat.cpu().detach().numpy(), delimiter = ",")
np.savetxt("/../data/data_outputs/empirical_dual_cov_lin_pred.csv", lin_pred.cpu().detach().numpy(), delimiter = ",")

"""### Save the model"""

# Save the model
with open('model_optuna.pkl', 'wb') as file:
    pickle.dump(net, file)

"""### Load the model as net"""

# Load the model
with open('model_optuna.pkl', 'rb') as file:
    net = pickle.load(file)

