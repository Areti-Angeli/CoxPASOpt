# -*- coding: utf-8 -*-
"""gseapy_not_custom_pathways.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O8Kv-w8qqK2DgV0lebS9WCA5-rDYzsje
"""

import os
from google.colab import drive
drive.mount("/content/drive/", force_remount=True)
root_dir = "/content/drive/MyDrive/"
project_folder = "gseapy"
os.chdir(root_dir + project_folder)
!pwd

!pip install gseapy

"""## File input"""

# Commented out IPython magic to ensure Python compatibility.
# https://github.com/zqfang/GSEApy/blob/master/gseapy/parser.py DON'T KNOW WTF THIS IS BUT IT WORKS ANYWAY
import json
import logging
import os
import xml.etree.ElementTree as ET
from collections.abc import Iterable
from typing import Dict, List, Optional, Tuple, Union

import requests

from gseapy.utils import DEFAULT_CACHE_PATH, unique



def read_gmt(path: str) -> Dict[str, List[str]]:
    """Read GMT file

    :param str path: the path to a gmt file.
    :return: a dict object
    """
    if path.lower().endswith("gmt"):
        return get_library(name=path, min_size=0, max_size=100000, gene_list=None)
    else:
        raise ValueError("Please input a gmt file")
    return
def get_library(
    name: str,
    organism: str = "Human",
    min_size: int = 0,
    max_size: int = 2000,
    save: Optional[str] = None,
    gene_list: Optional[List[str]] = None,
) -> Dict[str, List[str]]:
    """Parse gene_sets.gmt(gene set database) file or download from enrichr server.

    :param str name: the gene_sets.gmt file or an enrichr library name.
                    checkout full enrichr library name here: https://maayanlab.cloud/Enrichr/#libraries

    :param str organism: choose one from { 'Human', 'Mouse', 'Yeast', 'Fly', 'Fish', 'Worm' }.
                         This arugment has not effect if input is a `.gmt` file.

    :param min_size: Minimum allowed number of genes for each gene set. Default: 0.
    :param max_size: Maximum allowed number of genes for each gene set. Default: 2000.

    :param str save: the path to save the filtered gene set database.

    :param gene_list: if input a gene list, min and max overlapped genes between gene set and gene_list are kept.

    :return dict: Return a filtered gene set database dictionary.

    Note: **DO NOT** filter gene sets, when use :func:`replot`. Because ``GSEA`` Desktop have already
    done this for you.

    """
    genesets_dict = {}
    if name.lower().endswith(".gmt"):
        logging.info("User Defined gene sets is given.......continue..........")
        with open(name) as genesets:
            for line in genesets:
                entries = line.strip().split("\t")
                key = entries[0]
                genesets_dict[key] = entries[2:]
    else:
        # get gene sets from enrichr libary
        names = get_library_name(organism=organism)
        if name in names:
            logging.info("Downloading and generating Enrichr library gene sets...")
            genesets_dict = download_library(name, organism=organism)
        else:
            raise ValueError(
                "Sorry. The input: %s could be be found given organism: %s"
#                 % (name, organism)
            )

    # filtering gene_sets
    total = len(genesets_dict)
    keys = list(genesets_dict.keys())
    if gene_list is None:
        for k in keys:
            if min_size <= len(genesets_dict[k]) <= max_size:
                continue
            del genesets_dict[k]
    else:
        # given a gene_list, filter gene sets by gene_overlap numbers
        gene_dict = {g: i for i, g in enumerate(gene_list)}
        for subset in keys:
            subset_list = set(genesets_dict[subset])  # remove duplicates
            # drop genes not found in the gene_dict
            gene_overlap = [g for g in subset_list if g in gene_dict]
            tag_len = len(gene_overlap)
            if (min_size <= tag_len <= max_size) and tag_len < len(gene_list):
                # tag_len should < gene_list
                genesets_dict[subset] = gene_overlap
                continue
            del genesets_dict[subset]

    filsets_num = total - len(genesets_dict)
    if filsets_num > 0:
        logging.info(
            "%04d gene_sets have been filtered out when max_size=%s and min_size=%s"
#             % (filsets_num, max_size, min_size)
        )

    if filsets_num == len(genesets_dict):
        raise Exception(
            "No gene sets passed throught filtering condition!!!, try new paramters again!\n"
            + "Note: Gene names for gseapy is case sensitive."
        )

    if save is not None:
        gmtout = open(save, "w")
        for k, v in genesets_dict.items():
            outline = "%s\t%s\t%s\n" % (k, name, "\t".join(v))
            gmtout.write(outline)
        gmtout.close()

    return genesets_dict

import os
import pandas as pd
import gseapy as gp

# Import gene_list as .txt file
gene_list = pd.read_csv("gene_names_gseapy.txt", header=None)
gene_list = gene_list.squeeze().str.strip().str.upper().tolist()

"""## Run EnrichR"""

import pandas as pd

# If gene_list is a list, you can convert it to a pandas Series or DataFrame to inspect it.
if isinstance(gene_list, list):
    gene_list = pd.Series(gene_list)

# Display the first few elements of gene_list
print(gene_list.head())

# For Gene Ontology

enr = gp.enrichr(gene_list=gene_list, # or "./tests/data/gene_list.txt",
                 gene_sets=['Reactome_2022','KEGG_2021_Human', 'WikiPathways_2019_Human'],
                 organism='human',
                 outdir= "gsea_res", # don't write to disk
                 cutoff=0.1
                )

results_go = enr.results

"""## Visualize results"""

## Dotplot

from gseapy import dotplot
ax = dotplot(
    enr.results,
    column="Adjusted P-value",
    x='Gene_set',
    size=10,
    top_term=5,
    figsize=(3,5),
    title="Pathway Enrichment",
    xticklabels_rot=45,
    show_ring=True
)

## Barplot

from gseapy import barplot

custom_colors = {
    'Reactome_2022': 'salmon',
    'KEGG_2021_Human': 'skyblue',
    'WikiPathways_2019_Human': 'lightgreen'
}

ax = barplot(
    enr.results,
    column="Adjusted P-value",
    group='Gene_set',
    size=10,
    top_term=5,
    figsize=(3,5),
    color=custom_colors # Adjust if you have specific pathway set names
)